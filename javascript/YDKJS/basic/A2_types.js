/** *  Types *  @flow */// Only for ES 6const TAX_RATE = 0.08;TAX_RATE = 1;console.log(TAX_RATE); // still 0.08, fail if 'use strict'/* Type System */var type;console.log("type:", typeof(type), "\t\tvalue:", type);// "undefined"type = "hello world";console.log("type:", typeof(type), "\t\tvalue:", type);// "string"type = 42.3;console.log("type:", typeof(type), "\t\tvalue:", type);// "number"type = true;console.log("type:", typeof(type), "\t\tvalue:", type);// "boolean"type = null;console.log("type:", typeof(type), "\t\tvalue:", type);// "object"--weird, bugtype = undefined;console.log("type:", typeof(type), "\t\tvalue:", type);// "undefined"type = {b:"c"};console.log("type:", typeof(type), "\t\tvalue:", type);// "object"type = function(){};console.log("type:", typeof(type), "\t\tvalue:", type);// "function", special object// All javascript Type/* Object */var obj = {a:12, b:"haha"};console.log("Access Object:", obj, obj.a, obj["b"]);/* Function */function foo() {  return 42;}foo.bar = "hello world";console.log(typeof foo, typeof foo(), typeof foo.bar);// "function" "number" "string"/* Coercions */var a = "42";var b = Number(a);var c = a * 1;console.log(typeof(a), a); // "42"console.log(typeof(b), b); // 42 explicitconsole.log(typeof(c), c); // 42 implicit/* trusy and falsy */if(!"" && !0 && !-0 && !NaN && !null && !undefined && !false)  console.log('""', 0, NaN, null, undefined, false, ":are all falsy values");if("hello" && -1 && true && [] && [0] && {} && {a:1} && function foo(){})  console.log('"hello"', -1, true, [], [0], {}, typeof foo, ":are all trusy values");/* Equality */console.log("== will compare with ref if they are obj!");var a = {};var b = {};console.log(a==b);//false, because they are refconsole.log(a===b);//false, because they are refvar a = b = {};console.log(a==b);//true, same refconsole.log("== will not coercion if type are same!")var a = [1,2,3];var b = [1,2,3];var c = "1,2,3";console.log(a == c);//true, [1,2,3] -> "1,2,3"console.log(b == c);//true, the same reasonconsole.log(a == b);//false, because the type is same, so compare ref